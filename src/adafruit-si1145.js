// Generated by CoffeeScript 1.10.0

/*
************************************************** 
This is a library for the Si1145 UV/IR/Visible Light Sensor
Designed specifically to work with the Si1145 sensor in the
adafruit shop
----> https:# www.adafruit.com/products/1777
These sensors use I2C to communicate, 2 pins are required to  
interface
Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!
Written by Limor Fried/Ladyada for Adafruit Industries.  
BSD license, all text above must be included in any redistribution
****************************************************
*/

(function() {
    var Adafruit_SI1145, SI1145_ADDR, SI1145_ALS_AUTO, SI1145_ALS_FORCE, SI1145_ALS_PAUSE, SI1145_BUSADDR, SI1145_GET_CAL, SI1145_NOP, SI1145_PARAM_ADCCOUNTER_511CLK, SI1145_PARAM_ADCMUX_LARGEIR, SI1145_PARAM_ADCMUX_SMALLIR, SI1145_PARAM_ALSENCODE, SI1145_PARAM_ALSIRADCGAIN, SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE, SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ALSVISADCGAIN, SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE, SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_AUXADCMUX, SI1145_PARAM_CHLIST, SI1145_PARAM_CHLIST_ENALSIR, SI1145_PARAM_CHLIST_ENALSVIS, SI1145_PARAM_CHLIST_ENAUX, SI1145_PARAM_CHLIST_ENPS1, SI1145_PARAM_CHLIST_ENPS2, SI1145_PARAM_CHLIST_ENPS3, SI1145_PARAM_CHLIST_ENUV, SI1145_PARAM_I2CADDR, SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_PS2ADCMUX, SI1145_PARAM_PS3ADCMUX, SI1145_PARAM_PSADCGAIN, SI1145_PARAM_PSADCMISC, SI1145_PARAM_PSADCMISC_PSMODE, SI1145_PARAM_PSADCMISC_RANGE, SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_PSENCODE, SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1, SI1145_PARAM_PSLED12SEL_PS1LED2, SI1145_PARAM_PSLED12SEL_PS1LED3, SI1145_PARAM_PSLED12SEL_PS1NONE, SI1145_PARAM_PSLED12SEL_PS2LED1, SI1145_PARAM_PSLED12SEL_PS2LED2, SI1145_PARAM_PSLED12SEL_PS2LED3, SI1145_PARAM_PSLED12SEL_PS2NONE, SI1145_PARAM_PSLED3SEL, SI1145_PARAM_QUERY, SI1145_PARAM_SET, SI1145_PSALS_AUTO, SI1145_PSALS_FORCE, SI1145_PSALS_PAUSE, SI1145_PS_AUTO, SI1145_PS_FORCE, SI1145_PS_PAUSE, SI1145_REG_ALSIRDATA0, SI1145_REG_ALSIRDATA1, SI1145_REG_ALSVISDATA0, SI1145_REG_ALSVISDATA1, SI1145_REG_CHIPSTAT, SI1145_REG_COMMAND, SI1145_REG_HWKEY, SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTMODE, SI1145_REG_INTCFG_INTOE, SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE, SI1145_REG_IRQEN_PS1EVERYSAMPLE, SI1145_REG_IRQEN_PS2EVERYSAMPLE, SI1145_REG_IRQEN_PS3EVERYSAMPLE, SI1145_REG_IRQMODE1, SI1145_REG_IRQMODE2, SI1145_REG_IRQSTAT, SI1145_REG_IRQSTAT_ALS, SI1145_REG_MEASRATE0, SI1145_REG_MEASRATE1, SI1145_REG_PARAMRD, SI1145_REG_PARAMWR, SI1145_REG_PARTID, SI1145_REG_PS1DATA0, SI1145_REG_PS1DATA1, SI1145_REG_PS2DATA0, SI1145_REG_PS2DATA1, SI1145_REG_PS3DATA0, SI1145_REG_PS3DATA1, SI1145_REG_PSLED21, SI1145_REG_PSLED3, SI1145_REG_PSRATE, SI1145_REG_RESPONSE, SI1145_REG_REVID, SI1145_REG_SEQID, SI1145_REG_UCOEFF0, SI1145_REG_UCOEFF1, SI1145_REG_UCOEFF2, SI1145_REG_UCOEFF3, SI1145_REG_UVINDEX0, SI1145_REG_UVINDEX1, SI1145_RESET, Wire, _;

    Wire = require('i2c');

    _ = require('underscore');

    SI1145_PARAM_QUERY = 0x80;

    SI1145_PARAM_SET = 0xA0;

    SI1145_NOP = 0x0;

    SI1145_RESET = 0x01;

    SI1145_BUSADDR = 0x02;

    SI1145_PS_FORCE = 0x05;

    SI1145_ALS_FORCE = 0x06;

    SI1145_PSALS_FORCE = 0x07;

    SI1145_PS_PAUSE = 0x09;

    SI1145_ALS_PAUSE = 0x0A;

    SI1145_PSALS_PAUSE = 0xB;

    SI1145_PS_AUTO = 0x0D;

    SI1145_ALS_AUTO = 0x0E;

    SI1145_PSALS_AUTO = 0x0F;

    SI1145_GET_CAL = 0x12;

    SI1145_PARAM_I2CADDR = 0x00;

    SI1145_PARAM_CHLIST = 0x01;

    SI1145_PARAM_CHLIST_ENUV = 0x80;

    SI1145_PARAM_CHLIST_ENAUX = 0x40;

    SI1145_PARAM_CHLIST_ENALSIR = 0x20;

    SI1145_PARAM_CHLIST_ENALSVIS = 0x10;

    SI1145_PARAM_CHLIST_ENPS1 = 0x01;

    SI1145_PARAM_CHLIST_ENPS2 = 0x02;

    SI1145_PARAM_CHLIST_ENPS3 = 0x04;

    SI1145_PARAM_PSLED12SEL = 0x02;

    SI1145_PARAM_PSLED12SEL_PS2NONE = 0x00;

    SI1145_PARAM_PSLED12SEL_PS2LED1 = 0x10;

    SI1145_PARAM_PSLED12SEL_PS2LED2 = 0x20;

    SI1145_PARAM_PSLED12SEL_PS2LED3 = 0x40;

    SI1145_PARAM_PSLED12SEL_PS1NONE = 0x00;

    SI1145_PARAM_PSLED12SEL_PS1LED1 = 0x01;

    SI1145_PARAM_PSLED12SEL_PS1LED2 = 0x02;

    SI1145_PARAM_PSLED12SEL_PS1LED3 = 0x04;

    SI1145_PARAM_PSLED3SEL = 0x03;

    SI1145_PARAM_PSENCODE = 0x05;

    SI1145_PARAM_ALSENCODE = 0x06;

    SI1145_PARAM_PS1ADCMUX = 0x07;

    SI1145_PARAM_PS2ADCMUX = 0x08;

    SI1145_PARAM_PS3ADCMUX = 0x09;

    SI1145_PARAM_PSADCOUNTER = 0x0A;

    SI1145_PARAM_PSADCGAIN = 0x0B;

    SI1145_PARAM_PSADCMISC = 0x0C;

    SI1145_PARAM_PSADCMISC_RANGE = 0x20;

    SI1145_PARAM_PSADCMISC_PSMODE = 0x04;

    SI1145_PARAM_ALSIRADCMUX = 0x0E;

    SI1145_PARAM_AUXADCMUX = 0x0F;

    SI1145_PARAM_ALSVISADCOUNTER = 0x10;

    SI1145_PARAM_ALSVISADCGAIN = 0x11;

    SI1145_PARAM_ALSVISADCMISC = 0x12;

    SI1145_PARAM_ALSVISADCMISC_VISRANGE = 0x20;

    SI1145_PARAM_ALSIRADCOUNTER = 0x1D;

    SI1145_PARAM_ALSIRADCGAIN = 0x1E;

    SI1145_PARAM_ALSIRADCMISC = 0x1F;

    SI1145_PARAM_ALSIRADCMISC_RANGE = 0x20;

    SI1145_PARAM_ADCCOUNTER_511CLK = 0x70;

    SI1145_PARAM_ADCMUX_SMALLIR = 0x00;

    SI1145_PARAM_ADCMUX_LARGEIR = 0x03;

    SI1145_REG_PARTID = 0x00;

    SI1145_REG_REVID = 0x01;

    SI1145_REG_SEQID = 0x02;

    SI1145_REG_INTCFG = 0x03;

    SI1145_REG_INTCFG_INTOE = 0x01;

    SI1145_REG_INTCFG_INTMODE = 0x02;

    SI1145_REG_IRQEN = 0x04;

    SI1145_REG_IRQEN_ALSEVERYSAMPLE = 0x01;

    SI1145_REG_IRQEN_PS1EVERYSAMPLE = 0x04;

    SI1145_REG_IRQEN_PS2EVERYSAMPLE = 0x08;

    SI1145_REG_IRQEN_PS3EVERYSAMPLE = 0x10;

    SI1145_REG_IRQMODE1 = 0x05;

    SI1145_REG_IRQMODE2 = 0x06;

    SI1145_REG_HWKEY = 0x07;

    SI1145_REG_MEASRATE0 = 0x08;

    SI1145_REG_MEASRATE1 = 0x09;

    SI1145_REG_PSRATE = 0x0A;

    SI1145_REG_PSLED21 = 0x0F;

    SI1145_REG_PSLED3 = 0x10;

    SI1145_REG_UCOEFF0 = 0x13;

    SI1145_REG_UCOEFF1 = 0x14;

    SI1145_REG_UCOEFF2 = 0x15;

    SI1145_REG_UCOEFF3 = 0x16;

    SI1145_REG_PARAMWR = 0x17;

    SI1145_REG_COMMAND = 0x18;

    SI1145_REG_RESPONSE = 0x20;

    SI1145_REG_IRQSTAT = 0x21;

    SI1145_REG_IRQSTAT_ALS = 0x01;

    SI1145_REG_ALSVISDATA0 = 0x22;

    SI1145_REG_ALSVISDATA1 = 0x23;

    SI1145_REG_ALSIRDATA0 = 0x24;

    SI1145_REG_ALSIRDATA1 = 0x25;

    SI1145_REG_PS1DATA0 = 0x26;

    SI1145_REG_PS1DATA1 = 0x27;

    SI1145_REG_PS2DATA0 = 0x28;

    SI1145_REG_PS2DATA1 = 0x29;

    SI1145_REG_PS3DATA0 = 0x2A;

    SI1145_REG_PS3DATA1 = 0x2B;

    SI1145_REG_UVINDEX0 = 0x2C;

    SI1145_REG_UVINDEX1 = 0x2D;

    SI1145_REG_PARAMRD = 0x2E;

    SI1145_REG_CHIPSTAT = 0x30;

    SI1145_ADDR = 0x60;

    Adafruit_SI1145 = (function() {
        Adafruit_SI1145.prototype.address = 0x60;

        Adafruit_SI1145.prototype.device = '/dev/i2c-1';

        Adafruit_SI1145.prototype.log_err = true;

        function Adafruit_SI1145(address, device, log_err) {
            this.address = address;
            this.device = device;
            this.log_err = log_err;
            this.wire = new Wire(this.address, {
                device: this.device
            });
        }


        Adafruit_SI1145.prototype.init = function(){
            this._read(SI1145_REG_PARTID, 1, function(err, res){
                console.log(res);
                if (res !== 45){
                    console.log("WTF is going on");
                }
            });
            this.reset();
            var holder = this;
            sleep(100).then(()=>{
                holder.calibrate();
            });

        };



        Adafruit_SI1145.prototype.begin = function() {
            var log = _.bind(console.log, console);
            _.delay(log, 100, "Begin reset");
            this._read(SI1145_REG_PARTID, 1, function(err, res) {
                console.log(res);
                if (res == null){
                    console.log('device not supported');
                }
            });
            this.reset();
            _.delay(log, 100, "Done reset");
            //Enable UVindex measurement coeff
            this._send(SI1145_REG_UCOEFF0, 0x29, this._err);
            this._send(SI1145_REG_UCOEFF1, 0x89, this._err);
            this._send(SI1145_REG_UCOEFF2, 0x02, this._err);
            this._send(SI1145_REG_UCOEFF3, 0x00, this._err);

            //enable UVsensor
            this._sendParam(SI1145_PARAM_CHLIST, SI1145_PARAM_CHLIST_ENUV 
                | SI1145_PARAM_CHLIST_ENALSIR 
                | SI1145_PARAM_CHLIST_ENALSVIS 
                | SI1145_PARAM_CHLIST_ENPS1
                , this._err);

            //enable interrupt on every sample
            this._send(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE, this._err);
            this._send(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE, this._err);

            //Proximity ssensor*******************************

            //program LED current
            this._send(SI1145_REG_PSLED21, 0x03, this._err);
            this._sendParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR, this._err);

            //Prox sensor #1 uses LED #1
            this._sendParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1, this._err);

            //Fastest clock
            this._sendParam(SI1145_PARAM_PSADCGAIN, 0, this._err);

            //Take 511 clock 
            console.log("clock");
            this._sendParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK, this._err);

            //In prox mode, high range
            this._sendParam(SI1145_PARAM_PSADCMISC, SI1145_PARAM_PSADCMISC_RANGE 
                | SI1145_PARAM_PSADCMISC_PSMODE
                , this._err);
            this._sendParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR, this._err);

            // fastest clock
            this._sendParam(SI1145_PARAM_ALSIRADCGAIN, 0, this._err);

            // take 511 clocks to meassure
            this._sendParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK, this._err);

            //in high range mode
            this._sendParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE, this._err);

            // fastest clock
            this._sendParam(SI1145_PARAM_ALSVISADCGAIN, 0, this._err);

            //take 511 clocks to measurement
            console.log("clock");
            this._sendParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK, this._err);

            // in high range mode
            this._sendParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE, this._err);

            //measurement rate for auto
            this._send(SI1145_REG_MEASRATE0, 0xFF, this._err);

            //Auto run
            this._send(SI1145_REG_COMMAND, SI1145_PSALS_AUTO, this._err);

            return true;
            //return this._send(SI1145_REG_COMMAND, SI1145_PSALS_AUTO, this._err);
        };

        Adafruit_SI1145.prototype.reset = function() {
            var log = _.bind(console.log, console);
            this._read(SI1145_REG_PARTID, 1, function(err, res) {
                console.log(res);
            });
            this._send(SI1145_REG_MEASRATE0, 0, this._err);
            this._send(SI1145_REG_MEASRATE1, 0, this._err);
            this._send(SI1145_REG_IRQEN, 0, this._err);
            this._send(SI1145_REG_IRQMODE1, 0, this._err);
            this._send(SI1145_REG_IRQMODE2, 0, this._err);
            this._send(SI1145_REG_INTCFG, 0, this._err);
            this._send(SI1145_REG_IRQSTAT, 0xFF, this._err);

            this._send(SI1145_REG_COMMAND, SI1145_RESET, this._err);
            //_.delay(this._send(SI1145_REG_HWKEY, 10, 0x17));
            var holder = this;

            sleep(500).then(() => {
                holder._send(SI1145_REG_HWKEY, 0x17, holder._err);
            });
            //this._send(SI1145_REG_HWKEY, 0x17, this._err);
            return _.delay(_.noop, 10);
        };
        Adafruit_SI1145.prototype.calibrate = function(){
            //Enable UVindex measurement coeff
            console.log("calibrating");
            this._send(SI1145_REG_UCOEFF0, 0x29, this._err);
            this._send(SI1145_REG_UCOEFF1, 0x89, this._err);
            this._send(SI1145_REG_UCOEFF2, 0x02, this._err);
            this._send(SI1145_REG_UCOEFF3, 0x00, this._err);

            //Enable UV sensor
            this._sendParam(SI1145_PARAM_CHLIST, SI1145_PARAM_CHLIST_ENUV 
                | SI1145_PARAM_CHLIST_ENALSIR 
                | SI1145_PARAM_CHLIST_ENALSVIS 
                | SI1145_PARAM_CHLIST_ENPS1, this._err);
            // Enable interrupt on every sample
            this._send(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE, this._err);
            this._send(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE, this._err);

            /****************************** Prox Sense 1 */

            // Program LED current
            this._send(SI1145_REG_PSLED21, 0x03, this._err); // 20mA for LED 1 only
            this._sendParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR, this._err);

            // Prox sensor #1 uses LED #1
            this._sendParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1, this._err);

            // Fastest clocks, clock div 1
            this._sendParam(SI1145_PARAM_PSADCGAIN, 0, this._err);

            // Take 511 clocks to measure
            this._sendParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK, this._err);

            // in prox mode, high range
            this._sendParam(SI1145_PARAM_PSADCMISC, SI1145_PARAM_PSADCMISC_RANGE 
                | SI1145_PARAM_PSADCMISC_PSMODE, this._err);
            this._sendParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR, this._err);

            // Fastest clocks, clock div 1
            this._sendParam(SI1145_PARAM_ALSIRADCGAIN, 0, this._err);

            // Take 511 clocks to measure
            this._sendParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK, this._err);

            // in high range mode
            this._sendParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE, this._err);

            // fastest clocks, clock div 1
            this._sendParam(SI1145_PARAM_ALSVISADCGAIN, 0, this._err);

            // Take 511 clocks to measure
            this._sendParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK, this._err);

            // in high range mode (not normal signal)
            this._sendParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE, this._err);

            // measurement rate for auto
            this._send(SI1145_REG_MEASRATE0, 0xFF, this._err); // 255 * 31.25uS = 8ms

            // auto run
            this._send(SI1145_REG_COMMAND, SI1145_PSALS_AUTO, this._err);

            return true;
        };

        Adafruit_SI1145.prototype.readUV = function(callback) {
            return this._read(0x2C, 2, callback);
        };

        Adafruit_SI1145.prototype.readVisible = function(callback) {
            return this._read(0x22, 2, callback);
        };

        Adafruit_SI1145.prototype.readIR = function(callback) {
            return this._read(0x24, 2, callback);
        };

        Adafruit_SI1145.prototype.readProxy = function(callback) {
            return this._read(0x26, 2, callback);
        };

        Adafruit_SI1145.prototype._sendParam = function(param, value, callback) {
            this.wire.writeBytes(SI1145_REG_PARAMWR, [value], callback);
            this.wire.writeBytes(SI1145_REG_COMMAND, [param | SI1145_PARAM_SET], callback);
            var paramVal = this.wire.readBytes(SI1145_REG_PARAMRD, 1, callback);
            console.log(paramVal);
            //return this.wire.readBytes(SI1145_REG_PARAMRD, 1, callback);
            return paramVal;
        };

        Adafruit_SI1145.prototype._readParam = function(param, callback) {
            this.wire.writeBytes(SI1145_REG_COMMAND, param | SI1145_PARAM_QUERY);
            return this.wire.readBytes(SI1145_REG_PARAMRD, 1, callback);
        };

        Adafruit_SI1145.prototype._send = function(cmd, values, callback) {
            return this.wire.writeBytes(cmd, [values], callback);
        };

        Adafruit_SI1145.prototype._read = function(cmd, length, callback) {
            return this.wire.readBytes(cmd, length, callback);
        };

        Adafruit_SI1145.prototype._err = function(msg) {
            if (this.log_err) {
                return console.log(msg);
            }
        };

        return Adafruit_SI1145;

    })();

    module.exports = Adafruit_SI1145;

}).call(this);

function sleep (time) {
    return new Promise((resolve) => setTimeout(resolve, time));
}

